extern crate rand;
use rand::thread_rng;

use curve25519_dalek_ng::scalar::Scalar;

 extern crate merlin;
 use merlin::Transcript;

 extern crate bulletproofs;
 use bulletproofs::{BulletproofGens, PedersenGens, RangeProof};

 extern crate hex;

use std::env;

use std::io;

use ansi_term::Color::*;

const BULLET: &'static str = r#"
7777777777777777777777???????????????????????????77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
777777777777777777777P###########################Y777777777777777777777777777777777777777777777777777777777777777777777777777777777GBBBBBBBBBBBBBBBBBBBBBBBBBBBJ77777777777777777777
777777777777777777777G&&&&&&&&&&&&&&&&&&&&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&&&&&&&&&&&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&#############&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&&&&&&&#Y5&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&PJJJJJJJJJJJG&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&&&&&&B7!G&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&#############&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&BG&&&5~J#&&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&PJJJJJJJG&&&&&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&5!?P?!P&&&&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&#########&&&&&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&#Y!?B&&&&&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&&&&&&&&&&&&&&&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&&&##&&&&&&&&&&&&&&J77777777777777777777
777777777777777777777G&&&&&&&&&&&&&&&&&&&&&&&&&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777B&&&&&&&&&&&&&&&&&&&&&&&&&&&J77777777777777777777
777777777777777777777JYYYYYYYYYYYYYP#&&&&BYYYYYYY?7777777777777777777777777777777777777777777777777777777777777777777777777777777775P5555G&&&&&#P5P5555555555PP?77777777777777777777
777777777777777777777777777777777777JG&&&G7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777!5&&&&P?777777777777777777777777777777777777
77777777777777777777777777777777777777Y#&B777777777777?JJJJ77777777777777777777777777777777777777777777777777777777777777????7777777777775&&BJ77777777777777777777777777777777777777
777777777777777777777777777777777777777?PB7777777777J5J!~!7YY777777777777777777777777777777777777777777777777777777777JYJ?7?JYJ7777777777P#57777777777777777777777777777777777777777
77777777777777777777777777777777777777777?777777777J5.      ?577777777777777777777777777777777777777777777777777777775J:   .^.?5777777777J?77777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777775!       .G777777777777777777777777777777777777777777777777777777YJ   :!JJ7 75777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777G:        5Y7777777777777777777777777777777777777777777777777777?P.~7?7^. 7J.5?77777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777G~       .5J7777777777777777777777777777775J77777777777777777777YYJ!:      ?77577777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777?G^      YY7777777777777777777?YYYYYYYYYY5&&#PJ77777777777777777Y?Y^      .Y^!577777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777?G!.  ^5Y777777777777777777777??????????J#B5J?777777777777777775!.5^     J! ~P77777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777G?????GJ77777777777777777777777777777777?777777777777777777777P: :G7^^~57  .P77777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777?JYYG7  .  ^P5YJJ?777777777777777777777777777777777777777777777777?5 .~5^!!^7Y:. YJ7777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777Y5?!~:!J~.  :7J:^!7J577777777777777777J5P77777777777777777777777777?P5?JP:     !G??YP7777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777?P.     .!????~      YY77777777777777JG&&#55555555555?77777777777777P~   !Y^   !Y^ ..YY777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777Y?                   ^P777777777777777?YPG?777777777777777777777777JY     :?J~J?.    ^G777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777P7...              ..:P?7777777777777777777777777777777777777777777PJ::..   :7:   ..::PJ77777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777JYYYYYYJJ?777??JJJYYYYY?7777777777777777777777777777777777777777777JYYYYYYJJ???JJYYYYYY?77777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777????JJ????7777777777777777777777777777777777777777777777777777777777?????7777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777?P5Y555?55Y5?5Y5YJ55Y7777777777777777777777777777777777777777777775?5YPYJP5Y5JP5J5YP5JP557777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777JB5YGPGYPJP5G55GYJGG5777777777777777777777777777777777777777777777YG5YGYJGP5PYGY?G5GYJGP57777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777?Y77Y?Y?Y5J757J5YJYJJ7777777777777777777777777777777777777777777777Y??YY?J?JJ?Y77YJYY?J?J7777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
"#;



 fn main() {


    let lines = BULLET.lines().map(|s| s.to_string()).collect::<Vec<String>>();
    let color = Green;

    for line in &lines {
        print!("{} ", color.paint(line));
        println!("");
    }

    println!("");
    
// Generate a secret value
    let mut secret = String::new();
    let mut nbits= String::new();

    println!("Enter Secret: ");

    io::stdin().read_line(&mut secret).expect("Not Able To Process The Line");

    let secret: u64 = secret.trim().parse().expect("Numbers as input Only");

    println!("Enter The Bit Vector: ");

    io::stdin().read_line(&mut nbits).expect("Not Able To Process The Line");

    let nbits: usize = nbits.trim().parse().expect("Numbers as input Only");
// Pedersen commitments
    let ped_commits = PedersenGens::default();

// Generators for Bulletproofs, valid for proofs up to 64 bits
    let bullet_gens = BulletproofGens::new(64, 1);



// blinding factor

    let blinding_factor = Scalar::random(&mut thread_rng());


// Create transcript

    let mut prover_ts = Transcript::new("Test".as_bytes());

// Implement an n-bit rangeproof
    let (proof, commitment) = RangeProof::prove_single( &bullet_gens,&ped_commits,&mut prover_ts,secret, &blinding_factor, nbits,).expect("Oops!"); // cccccccc

    println!("Secret:\t{}",secret);
    println!("Bits:\t{}. Range: 0 to {}",nbits,u128::pow(2,nbits as u32));
 
// Verify the proof
    let mut verifier_ts = Transcript::new("Test".as_bytes());

    let rtn = proof.verify_single(&bullet_gens, &ped_commits, &mut verifier_ts, &commitment, nbits);
       
    if rtn.is_ok()==true { println!("Proven!!!"); }
    else  { println!("Not Proven!!!"); }

    let color = Red;
    println!("\n\nCommitments:\n{}",hex::encode(commitment.as_bytes()));
    println!("Proof:\n{}", color.paint(hex::encode(proof.to_bytes())));
}
